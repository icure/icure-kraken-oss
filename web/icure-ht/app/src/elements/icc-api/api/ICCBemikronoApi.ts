/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {XHR} from "./XHR"
import * as models from '../model/models';

export class iccBemikronoApi {
    host : string
    constructor(host) {
        this.host = host
    }


    handleError(e: XHR.Data) {
        if (e.status == 401) throw Error('auth-failed')
        else throw Error('api-error'+ e.status)
    }


    appointments(date: number) : Promise<Array<models.AppointmentDto>|any> {
        let _body = null
        
        
        const _url = this.host+"/be_mikrono/appointments/byDate/{date}".replace("{date}", date) + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc => (doc.body as Array<JSON>).map(it=>new models.AppointmentDto(it)))
                .catch(err => this.handleError(err))


    }
    appointments_1(patientId: string, from?: number, from2?: number) : Promise<Array<models.AppointmentDto>|any> {
        let _body = null
        
        
        const _url = this.host+"/be_mikrono/appointments/byPatient/{patientId}".replace("{patientId}", patientId) + "?ts=" + (new Date).getTime()  + (from ? "&from=" + from : "") + (from2 ? "&from2=" + from2 : "")

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc => (doc.body as Array<JSON>).map(it=>new models.AppointmentDto(it)))
                .catch(err => this.handleError(err))


    }
    notify(appointmentId: string, action: string) : Promise<Boolean|any> {
        let _body = null
        
        
        const _url = this.host+"/be_mikrono/notify/{appointmentId}/{action}".replace("{appointmentId}", appointmentId).replace("{action}", action) + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc => true)
                .catch(err => this.handleError(err))


    }
    register(userId: string, body?: models.MikronoCredentialsDto) : Promise<Boolean|any> {
        let _body = null
        _body = body
        
        const _url = this.host+"/be_mikrono/user/{userId}/register".replace("{userId}", userId) + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('PUT', _url , [], _body )
                .then(doc => true)
                .catch(err => this.handleError(err))


    }
    sendMessage(body?: models.EmailOrSmsMessageDto) : Promise<Boolean|any> {
        let _body = null
        _body = body
        
        const _url = this.host+"/be_mikrono/sendMessage" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('POST', _url , [], _body )
                .then(doc => true)
                .catch(err => this.handleError(err))


    }
    setUserCredentials(userId: string, body?: models.MikronoCredentialsDto) : Promise<Boolean|any> {
        let _body = null
        _body = body
        
        const _url = this.host+"/be_mikrono/user/{userId}/credentials".replace("{userId}", userId) + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('PUT', _url , [], _body )
                .then(doc => true)
                .catch(err => this.handleError(err))


    }
    syncSince(url: string, from: number, user: string, password: string) : Promise<Array<string>|any> {
        let _body = null
        
        
        const _url = this.host+"/be_mikrono/sync/{url}/{from}/{user}/{password}".replace("{url}", url).replace("{from}", from).replace("{user}", user).replace("{password}", password) + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('POST', _url , [], _body )
                .then(doc => (doc.body as Array<JSON>).map(it=>new string(it)))
                .catch(err => this.handleError(err))


    }
    updateIds(url: string, user: string, password: string) : Promise<boolean|any> {
        let _body = null
        
        
        const _url = this.host+"/be_mikrono/updateIds/{url}/{user}/{password}".replace("{url}", url).replace("{user}", user).replace("{password}", password) + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('POST', _url , [], _body )
                .then(doc => new boolean(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
}

