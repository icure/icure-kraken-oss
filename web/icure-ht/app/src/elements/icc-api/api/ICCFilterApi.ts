/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {XHR} from "./XHR"
import * as models from '../model/models';

export class iccFilterApi {
    host : string
    constructor(host: string) {
        this.host = host
    }


    handleError(e: XHR.Data) {
        if (e.status == 401) throw Error('auth-failed')
        else throw Error('api-error'+ e.status)
    }


    findForEntity(entityName: string) : Promise<Array<models.FilterDto>|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/{entityName}".replace("{entityName}", entityName+"") + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc => (doc.body as Array<JSON>).map(it=>new models.FilterDto(it)))
                .catch(err => this.handleError(err))


    }
    getEmptyAndPredicate() : Promise<models.AndPredicate|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/p/and/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.AndPredicate(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyComplement() : Promise<models.ComplementFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/complement/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.ComplementFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyContactByHcpTagCodeDate() : Promise<models.ContactByHcPartyTagCodeDateFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/contact/byhcptcd/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.ContactByHcPartyTagCodeDateFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyContactByServiceIdsFilter() : Promise<models.ContactByServiceIdsFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/contact/bysvcids/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.ContactByServiceIdsFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyIntersection() : Promise<models.IntersectionFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/intersect/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.IntersectionFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyKeyValuePredicate() : Promise<models.KeyValuePredicate|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/p/kv/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.KeyValuePredicate(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyNotPredicate() : Promise<models.NotPredicate|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/p/not/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.NotPredicate(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyOrPredicate() : Promise<models.OrPredicate|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/p/or/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.OrPredicate(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyPatientByHcParty() : Promise<models.PatientByHcPartyFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/patient/by/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.PatientByHcPartyFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyPatientByHcPartyAndExternalId() : Promise<models.PatientByHcPartyAndExternalIdFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/patient/byextid/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.PatientByHcPartyAndExternalIdFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyPatientByHcPartyAndSsin() : Promise<models.PatientByHcPartyAndSsinFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/patient/byssin/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.PatientByHcPartyAndSsinFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyPatientByHcPartyDateOfBirth() : Promise<models.PatientByHcPartyDateOfBirthFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/patient/bydob/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.PatientByHcPartyDateOfBirthFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyPatientByHcPartyDateOfBirthBetween() : Promise<models.PatientByHcPartyDateOfBirthBetweenFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/patient/bydobb/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.PatientByHcPartyDateOfBirthBetweenFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyPatientByHcPartyNameContainsFuzzy() : Promise<models.PatientByHcPartyNameContainsFuzzyFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/patient/byname/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.PatientByHcPartyNameContainsFuzzyFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyPatientByIds() : Promise<models.PatientByIdsFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/patient/byids/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.PatientByIdsFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyServiceByContactsAndSubcontacts() : Promise<models.ServiceByContactsAndSubcontactsFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/service/bycsc/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.ServiceByContactsAndSubcontactsFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyServiceByHcpTagCodeDate() : Promise<models.ServiceByHcPartyTagCodeDateFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/service/byhcptcd/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.ServiceByHcPartyTagCodeDateFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
    getEmptyUnion() : Promise<models.UnionFilter|any> {
        let _body = null
        
        
        const _url = this.host+"/filter/f/union/empty" + "?ts=" + (new Date).getTime() 

        return XHR.sendCommand('GET', _url , [], _body )
                .then(doc =>  new models.UnionFilter(doc.body as JSON))
                .catch(err => this.handleError(err))


    }
}

