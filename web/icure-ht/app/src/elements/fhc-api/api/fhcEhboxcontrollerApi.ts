/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class fhcEhboxcontrollerApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  deleteMessagesUsingPOST(keystoreId: string, tokenId: string, passPhrase: string, messageIds: Array<string>, source: string): Promise<boolean | any> {
    let _body = null
    _body = messageIds
    
    const _url = this.host + "/ehbox/move/from/{source}".replace("{source}", source+"") + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc =>  JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
}
  getFullMessageUsingGET(keystoreId: string, tokenId: string, passPhrase: string, boxId: string, messageId: string): Promise<models.Message | any> {
    let _body = null
    
    const _url = this.host + "/ehbox/{boxId}/{messageId}".replace("{boxId}", boxId+"").replace("{messageId}", messageId+"") + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  new models.Message(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  getInfosUsingGET(keystoreId: string, tokenId: string, passPhrase: string): Promise<models.BoxInfo | any> {
    let _body = null
    
    const _url = this.host + "/ehbox" + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  new models.BoxInfo(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  loadMessagesUsingGET(keystoreId: string, tokenId: string, passPhrase: string, boxId: string, limit: number): Promise<Array<models.Message> | any> {
    let _body = null
    
    const _url = this.host + "/ehbox/{boxId}".replace("{boxId}", boxId+"") + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (limit ? "&limit=" + limit : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.Message(it)))
      .catch(err => this.handleError(err))
}
  moveMessagesUsingPOST(keystoreId: string, tokenId: string, passPhrase: string, messageIds: Array<string>, source: string, destination: string): Promise<boolean | any> {
    let _body = null
    _body = messageIds
    
    const _url = this.host + "/ehbox/move/from/{source}/to/{destination}".replace("{source}", source+"").replace("{destination}", destination+"") + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc =>  JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
}
  sendMessageUsingPOST(keystoreId: string, tokenId: string, passPhrase: string, publicationReceipt: boolean, receptionReceipt: boolean, readReceipt: boolean): Promise<boolean | any> {
    let _body = null
    
    const _url = this.host + "/ehbox" + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (publicationReceipt ? "&publicationReceipt=" + publicationReceipt : "") + (receptionReceipt ? "&receptionReceipt=" + receptionReceipt : "") + (readReceipt ? "&readReceipt=" + readReceipt : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc =>  JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
}
}

