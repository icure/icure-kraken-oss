/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class fhcRecipecontrollerApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  createPrescriptionUsingPOST(keystoreId: string, tokenId: string, hcpQuality: string, hcpNihii: string, hcpSsin: string, hcpName: string, passPhrase: string, prescription: models.PrescriptionRequest): Promise<models.Prescription | any> {
    let _body = null
    _body = prescription
    
    const _url = this.host + "/recipe" + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (hcpQuality ? "&hcpQuality=" + hcpQuality : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpName ? "&hcpName=" + hcpName : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc =>  new models.Prescription(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  getGalToAdministrationUnitUsingGET(galId: string): Promise<models.Code | any> {
    let _body = null
    
    const _url = this.host + "/recipe/gal/{galId}".replace("{galId}", galId+"") + "?ts=" + new Date().getTime() 

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  new models.Code(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  getPrescriptionUsingGET(rid: string): Promise<models.PrescriptionFullWithFeedback | any> {
    let _body = null
    
    const _url = this.host + "/recipe/{rid}".replace("{rid}", rid+"") + "?ts=" + new Date().getTime() 

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  new models.PrescriptionFullWithFeedback(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  listFeedbacksUsingGET(keystoreId: string, tokenId: string, hcpQuality: string, hcpNihii: string, hcpSsin: string, hcpName: string, passPhrase: string): Promise<Array<models.Feedback> | any> {
    let _body = null
    
    const _url = this.host + "/recipe/all/feedbacks" + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (hcpQuality ? "&hcpQuality=" + hcpQuality : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpName ? "&hcpName=" + hcpName : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.Feedback(it)))
      .catch(err => this.handleError(err))
}
  listOpenPrescriptionsUsingGET(keystoreId: string, tokenId: string, hcpQuality: string, hcpNihii: string, hcpSsin: string, hcpName: string, passPhrase: string): Promise<Array<models.Prescription> | any> {
    let _body = null
    
    const _url = this.host + "/recipe" + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (hcpQuality ? "&hcpQuality=" + hcpQuality : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpName ? "&hcpName=" + hcpName : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.Prescription(it)))
      .catch(err => this.handleError(err))
}
  revokePrescriptionUsingDELETE(keystoreId: string, tokenId: string, hcpQuality: string, hcpNihii: string, hcpSsin: string, hcpName: string, passPhrase: string, rid: string, reason: string): Promise<any | Boolean> {
    let _body = null
    
    const _url = this.host + "/recipe/{rid}".replace("{rid}", rid+"") + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (hcpQuality ? "&hcpQuality=" + hcpQuality : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpName ? "&hcpName=" + hcpName : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (reason ? "&reason=" + reason : "")

    return XHR.sendCommand("DELETE", _url, this.headers, _body)
      .then(doc => (doc.contentType.startsWith("application/octet-stream") ? doc.body : true))
      .catch(err => this.handleError(err))
}
  sendNotificationUsingPOST(keystoreId: string, tokenId: string, hcpQuality: string, hcpNihii: string, hcpSsin: string, hcpName: string, passPhrase: string, rid: string, patientId?: string, executorId?: string, text?: string): Promise<any | Boolean> {
    let _body = null
    
    const _url = this.host + "/recipe/notify/{rid}".replace("{rid}", rid+"") + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (hcpQuality ? "&hcpQuality=" + hcpQuality : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpName ? "&hcpName=" + hcpName : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (patientId ? "&patientId=" + patientId : "") + (executorId ? "&executorId=" + executorId : "") + (text ? "&text=" + text : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc => (doc.contentType.startsWith("application/octet-stream") ? doc.body : true))
      .catch(err => this.handleError(err))
}
  updateFeedbackFlagUsingPUT(keystoreId: string, tokenId: string, hcpQuality: string, hcpNihii: string, hcpSsin: string, hcpName: string, passPhrase: string, rid: string, feedbackFlag: boolean): Promise<any | Boolean> {
    let _body = null
    
    const _url = this.host + "/recipe/{rid}/feedback/{feedbackFlag}".replace("{rid}", rid+"").replace("{feedbackFlag}", feedbackFlag+"") + "?ts=" + new Date().getTime()  + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (hcpQuality ? "&hcpQuality=" + hcpQuality : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpName ? "&hcpName=" + hcpName : "") + (passPhrase ? "&passPhrase=" + passPhrase : "")

    return XHR.sendCommand("PUT", _url, this.headers, _body)
      .then(doc => (doc.contentType.startsWith("application/octet-stream") ? doc.body : true))
      .catch(err => this.handleError(err))
}
}

