/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class fhcHubcontrollerApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  getHcpConsentUsingGET(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpNihii: string, hcpLastName: string, hcpFirstName: string, hcpSsin: string, hcpZip: string): Promise<models.HcPartyConsent | any> {
    let _body = null
    
    const _url = this.host + "/hub/hcpconsent/{hcpNihii}".replace("{hcpNihii}", hcpNihii+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  new models.HcPartyConsent(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  getPatientConsentUsingGET1(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, patientSsin: string): Promise<models.Consent | any> {
    let _body = null
    
    const _url = this.host + "/hub/consent/{patientSsin}".replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  new models.Consent(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  getPatientUsingGET(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, patientSsin: string): Promise<models.Patient | any> {
    let _body = null
    
    const _url = this.host + "/hub/patient/{patientSsin}".replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  new models.Patient(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  getTherapeuticLinksUsingGET(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, patientSsin: string, therLinkType?: string, from?: Date, to?: Date): Promise<Array<models.TherapeuticLink> | any> {
    let _body = null
    
    const _url = this.host + "/hub/therlink/{hcpNihii}/{patientSsin}".replace("{hcpNihii}", hcpNihii+"").replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (therLinkType ? "&therLinkType=" + therLinkType : "") + (from ? "&from=" + from : "") + (to ? "&to=" + to : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.TherapeuticLink(it)))
      .catch(err => this.handleError(err))
}
  getTransactionSetUsingGET(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, ssin: string, sv: string, sl: string, value: string, breakTheGlassReason?: string): Promise<string | any> {
    let _body = null
    
    const _url = this.host + "/hub/ts/{ssin}/{sv}/{sl}/{value}".replace("{ssin}", ssin+"").replace("{sv}", sv+"").replace("{sl}", sl+"").replace("{value}", value+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (breakTheGlassReason ? "&breakTheGlassReason=" + breakTheGlassReason : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
}
  getTransactionUsingGET(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, ssin: string, sv: string, sl: string, value: string, breakTheGlassReason?: string): Promise<string | any> {
    let _body = null
    
    const _url = this.host + "/hub/t/{ssin}/{sv}/{sl}/{value}".replace("{ssin}", ssin+"").replace("{sv}", sv+"").replace("{sl}", sl+"").replace("{value}", value+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (breakTheGlassReason ? "&breakTheGlassReason=" + breakTheGlassReason : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc =>  JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
}
  getTransactionsListUsingGET(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, patientSsin: string, from?: number, to?: number, authorNihii?: string, authorSsin?: string, isGlobal?: boolean, breakTheGlassReason?: string): Promise<Array<models.TransactionSummary> | any> {
    let _body = null
    
    const _url = this.host + "/hub/list/{patientSsin}".replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (from ? "&from=" + from : "") + (to ? "&to=" + to : "") + (authorNihii ? "&authorNihii=" + authorNihii : "") + (authorSsin ? "&authorSsin=" + authorSsin : "") + (isGlobal ? "&isGlobal=" + isGlobal : "") + (breakTheGlassReason ? "&breakTheGlassReason=" + breakTheGlassReason : "")

    return XHR.sendCommand("GET", _url, this.headers, _body)
      .then(doc => (doc.body as Array<JSON>).map(it => new models.TransactionSummary(it)))
      .catch(err => this.handleError(err))
}
  putPatientUsingPOST(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, patientSsin: string, firstName: string, lastName: string, gender: string, dateOfBirth: number): Promise<models.Patient | any> {
    let _body = null
    
    const _url = this.host + "/hub/patient/{lastName}/{patientSsin}".replace("{patientSsin}", patientSsin+"").replace("{lastName}", lastName+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (firstName ? "&firstName=" + firstName : "") + (gender ? "&gender=" + gender : "") + (dateOfBirth ? "&dateOfBirth=" + dateOfBirth : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc =>  new models.Patient(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  putTransactionSetUsingPOST(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, hubId: number, patientSsin: string, message: string, hubApplication?: string): Promise<models.PutTransactionSetResponse | any> {
    let _body = null
    _body = message
    
    const _url = this.host + "/hub/ts/{hubId}/{patientSsin}".replace("{hubId}", hubId+"").replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (hubApplication ? "&hubApplication=" + hubApplication : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc =>  new models.PutTransactionSetResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  putTransactionUsingPOST(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, hubId: number, patientSsin: string, message: string, hubApplication?: string): Promise<models.PutTransactionResponse | any> {
    let _body = null
    _body = message
    
    const _url = this.host + "/hub/t/{hubId}/{patientSsin}".replace("{hubId}", hubId+"").replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (hubApplication ? "&hubApplication=" + hubApplication : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc =>  new models.PutTransactionResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
}
  registerPatientConsentUsingPOST1(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, patientSsin: string, patientEidCardNumber?: string): Promise<any | Boolean> {
    let _body = null
    
    const _url = this.host + "/hub/consent/{patientSsin}".replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpNihii ? "&hcpNihii=" + hcpNihii : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (patientEidCardNumber ? "&patientEidCardNumber=" + patientEidCardNumber : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc => (doc.contentType.startsWith("application/octet-stream") ? doc.body : true))
      .catch(err => this.handleError(err))
}
  registerTherapeuticLinkUsingPOST(endpoint: string, keystoreId: string, tokenId: string, passPhrase: string, hcpLastName: string, hcpFirstName: string, hcpNihii: string, hcpSsin: string, hcpZip: string, patientSsin: string, patientEidCardNumber?: string): Promise<any | Boolean> {
    let _body = null
    
    const _url = this.host + "/hub/therlink/{hcpNihii}/{patientSsin}".replace("{hcpNihii}", hcpNihii+"").replace("{patientSsin}", patientSsin+"") + "?ts=" + new Date().getTime()  + (endpoint ? "&endpoint=" + endpoint : "") + (keystoreId ? "&keystoreId=" + keystoreId : "") + (tokenId ? "&tokenId=" + tokenId : "") + (passPhrase ? "&passPhrase=" + passPhrase : "") + (hcpLastName ? "&hcpLastName=" + hcpLastName : "") + (hcpFirstName ? "&hcpFirstName=" + hcpFirstName : "") + (hcpSsin ? "&hcpSsin=" + hcpSsin : "") + (hcpZip ? "&hcpZip=" + hcpZip : "") + (patientEidCardNumber ? "&patientEidCardNumber=" + patientEidCardNumber : "")

    return XHR.sendCommand("POST", _url, this.headers, _body)
      .then(doc => (doc.contentType.startsWith("application/octet-stream") ? doc.body : true))
      .catch(err => this.handleError(err))
}
}

