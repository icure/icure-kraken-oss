package org.taktik.icure.be.ehealth.logic.vitalink.impl;

import be.ehealth.technicalconnector.exception.TechnicalConnectorException;
import be.ehealth.technicalconnector.session.SessionItem;
import be.smals.safe.connector.VitalinkService;
import be.smals.safe.connector.domain.BreakTheGlass;
import be.smals.safe.connector.domain.DataEntry;
import be.smals.safe.connector.domain.Error;
import be.smals.safe.connector.domain.Node;
import be.smals.safe.connector.domain.Pagination;
import be.smals.safe.connector.domain.PaginationInfo;
import be.smals.safe.connector.domain.protocol.FetchDataEntriesRequest;
import be.smals.safe.connector.domain.protocol.FetchDataEntriesResponse;
import be.smals.safe.connector.domain.protocol.StoreDataEntriesRequest;
import be.smals.safe.connector.domain.protocol.StoreDataEntriesResponse;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.taktik.icure.be.ehealth.TokenNotAvailableException;
import org.taktik.icure.be.ehealth.logic.vitalink.VitalinkLogic;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created with IntelliJ IDEA.
 * User: aduchate
 * Date: 23/06/14
 * Time: 09:40
 * To change this template use File | Settings | File Templates.
 */
public class VitalinkLogicImpl implements VitalinkLogic {
    private VitalinkService vitalink = new VitalinkService();
    private Log log = LogFactory.getLog(VitalinkLogic.class);

    @Override
    public List<DataEntry> putSumehr(String token, String sumehr, String formatCode, String reference, String niss, String previousVersionId, String previousVersionNumber) throws TechnicalConnectorException, TokenNotAvailableException {
        if (token == null) {
            throw new TokenNotAvailableException("Cannot obtain token for Ehealth Box operations");
        }

        List<DataEntry> result = new ArrayList<>();

        /*******************************
         * Define the values used in this example
         *******************************/
        // 1. Create the URI
        // The SSIN of the subject for which the data entry must be saved.
        // The Unique Identifier of the Data Entry (can be found in the URI returned by the store operation or in the returned URI's of the
        // fetch operation)
        // The version on which this update is based
        // Build the Vitalink URI of the Data Entry to be saved.
        String URI = (previousVersionId != null && previousVersionNumber != null) ? "/subject/" + niss + "/sumehr/" + previousVersionId + "/new/" + previousVersionNumber : "/subject/" + niss + "/sumehr/new";

        // 3. Update the metadata (if needed)
        Map<String, String> metadata = new HashMap<String, String>();
        metadata.put("languageCode", "nl-BE");
        metadata.put("availabilityStatus", "active");
        metadata.put("formatCode", formatCode);
        metadata.put("mimeType", "text/xml");
        metadata.put("encryptionFlag", "encrypted");

        // Create the store data entries operation request
        StoreDataEntriesRequest request = new StoreDataEntriesRequest(niss);
        // Create the Data Entry with URI, reference and payload (non-encrypted XML as byte array) and add the metadata
        DataEntry nde = null;
        try {
            nde = new DataEntry(URI, sumehr.getBytes("UTF8"), reference).withMetadata(metadata);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalArgumentException("Sumehr must be encoded in UTF-8", e);
        }
        // Add the complete Data Entry (URI, payload, reference, metadata) to the request
        request.getDataEntries().add(nde);

        StoreDataEntriesResponse response = vitalink.storeDataEntries(request);

        // Response should be 200, indicating that everything is OK
        // If the response is not 200, an error has occurred.
        // A unique message ID to track the request/response. Use this as a reference if you contact the Vitalink helpdesk.
        if (response.getStatus().getCode() != 200 && response.getServerMessageID() != null) {
            // See the status code documentation in the cookbook for more information on the possible errors.
            // Most errors will be related to the Data Entry not being OK, in this example the focus is on those errors.

            {
                // The code and message describe to problem that has occurred.
                int errCode = response.getStatus().getCode();
                String errMessage = response.getStatus().getMessage();
                // The software should interpret the error and take action accordingly
                System.out.println("Error while updating data entries for subject, code: '" + errCode + "', message: '" + errMessage + "'");

                DataEntry errorEntry = new DataEntry("");

                errorEntry.getMetadata().put("errorCode", "" + errCode);
                errorEntry.getMetadata().put("errorReference", "");
                errorEntry.getMetadata().put("errorMessage", "" + errMessage);

                result.add(errorEntry);
            }
            if (response.getStatus().getErrors() != null) {
                // Retrieve the errors for each data entry
                for (Error error : response.getStatus().getErrors()) {
                    // Each error will have a reference to the data entry for which the error has occurred.
                    String subErrReference = error.getReference();
                    // The code and message describe to problem that has occurred.
                    int subErrCode = error.getCode();
                    String subErrMessage = error.getMessage();

                    DataEntry errorEntry = new DataEntry("");

                    errorEntry.getMetadata().put("errorCode", "" + subErrCode);
                    errorEntry.getMetadata().put("errorReference", "" + subErrReference);
                    errorEntry.getMetadata().put("errorMessage", "" + subErrMessage);

                    result.add(errorEntry);

                    // The software should interpret the error and take action accordingly
                    System.out.println("Error while updating data entry '" + subErrReference + "', code: '" + subErrCode + "', message: '" + subErrMessage + "'");
                }
            }
        }

        // The store operation returns URI's for each data entry that is updated successfully
        for (DataEntry savedDataEntry : response.getDataEntries()) {
            DataEntry entry = new DataEntry(savedDataEntry.getDataEntryURI());

            entry.setReference(savedDataEntry.getReference());

            result.add(entry);
        }

        return result;
    }

    @Override
    public List<DataEntry> getSumehr(String token, String niss, boolean includeBusinessData, boolean breakTheGlass, String reason) throws TokenNotAvailableException, TechnicalConnectorException {
	    if (token == null) {
		    throw new TokenNotAvailableException("Cannot obtain token for Ehealth Box operations");
	    }


	    List<DataEntry> result = new ArrayList<DataEntry>();

        Pagination paginationCursor = new Pagination("/subject/" + niss + "/sumehr", 1);

        PAGINATION:
        while (paginationCursor != null) {
            FetchDataEntriesRequest request = new FetchDataEntriesRequest(niss, includeBusinessData);
            // in order to limit data transfer and delays we advise to add to the request a version number
            // if that is the current version no data will be returned because you already have the latest version.
            //request.setVersion(5);

            if (breakTheGlass) {
                request.setBreakTheGlass(new BreakTheGlass(true, reason));
            }

            request.setPagination(paginationCursor);

            /*******************************
             * Send Request to Vitalink
             *******************************/
            FetchDataEntriesResponse response = vitalink.fetchDataEntries(request);
            paginationCursor = null;
            /*******************************
             * Verify response
             *******************************/

            // Response should be 200, indicating that everything is OK
            // If the response is not 200, an error has occurred.
            // A unique message ID to track the request/response. Use this as a reference if you contact the Vitalink helpdesk.
            if (response.getStatus().getCode() != 200 && response.getServerMessageID() != null) {
                // See the status code documentation in the cookbook for more information on the possible errors.
                // The code and message describe to problem that has occurred.
                int errCode = response.getStatus().getCode();
                // 203 indicates that you already have the latest version
                if (errCode == 203) {
                    log.info("current version is up to date");
                } else {
                    {
                        String errMessage = response.getStatus().getMessage();
                        // The software should interpret the error and take action accordingly
                        log.error("Error while fetching data entries for subject, code: '" + errCode + "', message: '" + errMessage + "'");
                        DataEntry errorEntry = new DataEntry("");

                        errorEntry.getMetadata().put("errorCode", "" + errCode);
                        errorEntry.getMetadata().put("errorReference", "");
                        errorEntry.getMetadata().put("errorMessage", "" + errMessage);

                        result.add(errorEntry);
                    }
                    if (response.getStatus().getErrors() != null) {
                        // Retrieve the errors for each data entry
                        for (Error error : response.getStatus().getErrors()) {
                            // Each error will have a reference to the data entry for which the error has occurred.
                            String subErrReference = error.getReference();
                            // The code and message describe to problem that has occurred.
                            int subErrCode = error.getCode();
                            String subErrMessage = error.getMessage();
                            // The software should interpret the error and take action accordingly
                            log.error("Error while fetching data entry '" + subErrReference + "', code: '" + subErrCode + "', message: '" + subErrMessage + "'");

                            DataEntry errorEntry = new DataEntry("");

                            errorEntry.getMetadata().put("errorCode", "" + subErrCode);
                            errorEntry.getMetadata().put("errorReference", "" + subErrReference);
                            errorEntry.getMetadata().put("errorMessage", "" + subErrMessage);

                            result.add(errorEntry);

                            break PAGINATION;
                        }
                    }
                }
            }
            // Check subject timestamp and version
            // Retrieve the latest version for the given subjectID
            int version = response.getVersion();
            // Retrieve the time on which the last change has occurred
            Calendar lastUpdated = response.getLastUpdated();
            // Process the data (e.g. update local database if the returned version is newer)
            log.info("Subject '" + niss + "' is at version '" + version + "' and has been updated on '" + lastUpdated + "'");

            // Process the nodes of the subject, the nodes (e.g. medicationscheme) contain the data entries and pagination information.
            for (Node node : response.getNodes()) {
                // Process each returned node
                log.info("Node: '" + node.getName() + "'");

                // Verify the pagination info to know if all data entries have been received
                // Retrieve the pagination info
                PaginationInfo pagination = node.getPagination();
                log.info("Processing pagination for '" + pagination.getUri() + "', current index: '" + pagination.getPaginationIndex() + "', pagingation size: '" + pagination.getPaginationSize() + "' total record count: '" + pagination.getRecordCount() + "'");
                // Verify if all items are received
                if (pagination.hasNextPage()) {
                    paginationCursor = pagination.getNextPagination();
                } else {
                    // All data entries have been retrieved
                    paginationCursor = null;
                    log.info("All data entries received");
                }

                // Verify the data entries
                for (DataEntry dataEntry : node.getDataEntries()) {
                    DataEntry entry = new DataEntry(dataEntry.getDataEntryURI());

	                // Retrieve the URI of the data entry
	                entry.withMetadata(dataEntry.getMetadata()).setBusinessData(dataEntry.getBusinessData());

                        /*
                        Pattern pattern = Pattern.compile("/subject/([0-9]+)/sumehr/([0-9]+)/([0-9]+)");
                        Matcher matcher = pattern.matcher(dataEntry.getDataEntryURI());

                        if (matcher.matches()) {
                            entry.setPreviousVersionId(matcher.group(2));
                            entry.setPreviousVersionVersion(matcher.group(3));
                        }*/

	                entry.setReference(dataEntry.getReference());

	                result.add(entry);
                }
            }
        }
        return result;
    }
}
