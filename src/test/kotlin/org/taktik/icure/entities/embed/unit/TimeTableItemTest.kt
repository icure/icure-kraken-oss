package org.taktik.icure.entities.embed.unit

import java.time.Duration
import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.shouldBe
import org.taktik.icure.entities.embed.TimeTableHour
import org.taktik.icure.entities.embed.TimeTableItem
import org.taktik.icure.utils.entities.embed.iterator

class TimeTableItemTest : FunSpec({

	test("iterators on sunday every week with several hourly time spans give consistant results") {
		TimeTableItem(
			occurenceStartDate = 20220101,
			rrule = "FREQ=WEEKLY;BYDAY=SU;INTERVAL=1",
			hours = listOf(TimeTableHour(80000L, 120000L), TimeTableHour(140000L, 160000L))
		).iterator(
			20220101,
			20230101,
			Duration.ofMinutes(15)
		).asSequence().take(48).toList() shouldBe listOf(
			20220102080000L, 20220102081500L, 20220102083000L, 20220102084500L,
			20220102090000L, 20220102091500L, 20220102093000L, 20220102094500L,
			20220102100000L, 20220102101500L, 20220102103000L, 20220102104500L,
			20220102110000L, 20220102111500L, 20220102113000L, 20220102114500L,
			20220102140000L, 20220102141500L, 20220102143000L, 20220102144500L,
			20220102150000L, 20220102151500L, 20220102153000L, 20220102154500L,
			20220109080000L, 20220109081500L, 20220109083000L, 20220109084500L,
			20220109090000L, 20220109091500L, 20220109093000L, 20220109094500L,
			20220109100000L, 20220109101500L, 20220109103000L, 20220109104500L,
			20220109110000L, 20220109111500L, 20220109113000L, 20220109114500L,
			20220109140000L, 20220109141500L, 20220109143000L, 20220109144500L,
			20220109150000L, 20220109151500L, 20220109153000L, 20220109154500L,
		)
		TimeTableItem(
			days = listOf("7"),
			recurrenceTypes = listOf("EVERY_WEEK"),
			hours = listOf(TimeTableHour(80000L, 120000L), TimeTableHour(140000L, 160000L))
		).iterator(
			20220101,
			20230101,
			Duration.ofMinutes(15)
		).asSequence().take(48).toList() shouldBe listOf(
			20220102080000L, 20220102081500L, 20220102083000L, 20220102084500L,
			20220102090000L, 20220102091500L, 20220102093000L, 20220102094500L,
			20220102100000L, 20220102101500L, 20220102103000L, 20220102104500L,
			20220102110000L, 20220102111500L, 20220102113000L, 20220102114500L,
			20220102140000L, 20220102141500L, 20220102143000L, 20220102144500L,
			20220102150000L, 20220102151500L, 20220102153000L, 20220102154500L,
			20220109080000L, 20220109081500L, 20220109083000L, 20220109084500L,
			20220109090000L, 20220109091500L, 20220109093000L, 20220109094500L,
			20220109100000L, 20220109101500L, 20220109103000L, 20220109104500L,
			20220109110000L, 20220109111500L, 20220109113000L, 20220109114500L,
			20220109140000L, 20220109141500L, 20220109143000L, 20220109144500L,
			20220109150000L, 20220109151500L, 20220109153000L, 20220109154500L,
		)
	}

	test("iterators on sunday and wednesday every week with several hourly time spans give consistant results") {
		TimeTableItem(
			occurenceStartDate = 20220101,
			rrule = "FREQ=WEEKLY;BYDAY=SU,WE;INTERVAL=1",
			hours = listOf(TimeTableHour(80000L, 120000L), TimeTableHour(140000L, 160000L))
		).iterator(
			20220101,
			20230101,
			Duration.ofMinutes(15)
		).asSequence().take(72).toList() shouldBe listOf(
			20220102080000L, 20220102081500L, 20220102083000L, 20220102084500L,
			20220102090000L, 20220102091500L, 20220102093000L, 20220102094500L,
			20220102100000L, 20220102101500L, 20220102103000L, 20220102104500L,
			20220102110000L, 20220102111500L, 20220102113000L, 20220102114500L,
			20220102140000L, 20220102141500L, 20220102143000L, 20220102144500L,
			20220102150000L, 20220102151500L, 20220102153000L, 20220102154500L,
			20220105080000L, 20220105081500L, 20220105083000L, 20220105084500L,
			20220105090000L, 20220105091500L, 20220105093000L, 20220105094500L,
			20220105100000L, 20220105101500L, 20220105103000L, 20220105104500L,
			20220105110000L, 20220105111500L, 20220105113000L, 20220105114500L,
			20220105140000L, 20220105141500L, 20220105143000L, 20220105144500L,
			20220105150000L, 20220105151500L, 20220105153000L, 20220105154500L,
			20220109080000L, 20220109081500L, 20220109083000L, 20220109084500L,
			20220109090000L, 20220109091500L, 20220109093000L, 20220109094500L,
			20220109100000L, 20220109101500L, 20220109103000L, 20220109104500L,
			20220109110000L, 20220109111500L, 20220109113000L, 20220109114500L,
			20220109140000L, 20220109141500L, 20220109143000L, 20220109144500L,
			20220109150000L, 20220109151500L, 20220109153000L, 20220109154500L,
		)
		TimeTableItem(
			days = listOf("7", "3"),
			recurrenceTypes = listOf("EVERY_WEEK"),
			hours = listOf(TimeTableHour(80000L, 120000L), TimeTableHour(140000L, 160000L))
		).iterator(
			20220101,
			20230101,
			Duration.ofMinutes(15)
		).asSequence().take(72).toList() shouldBe listOf(
			20220102080000L, 20220102081500L, 20220102083000L, 20220102084500L,
			20220102090000L, 20220102091500L, 20220102093000L, 20220102094500L,
			20220102100000L, 20220102101500L, 20220102103000L, 20220102104500L,
			20220102110000L, 20220102111500L, 20220102113000L, 20220102114500L,
			20220102140000L, 20220102141500L, 20220102143000L, 20220102144500L,
			20220102150000L, 20220102151500L, 20220102153000L, 20220102154500L,
			20220105080000L, 20220105081500L, 20220105083000L, 20220105084500L,
			20220105090000L, 20220105091500L, 20220105093000L, 20220105094500L,
			20220105100000L, 20220105101500L, 20220105103000L, 20220105104500L,
			20220105110000L, 20220105111500L, 20220105113000L, 20220105114500L,
			20220105140000L, 20220105141500L, 20220105143000L, 20220105144500L,
			20220105150000L, 20220105151500L, 20220105153000L, 20220105154500L,
			20220109080000L, 20220109081500L, 20220109083000L, 20220109084500L,
			20220109090000L, 20220109091500L, 20220109093000L, 20220109094500L,
			20220109100000L, 20220109101500L, 20220109103000L, 20220109104500L,
			20220109110000L, 20220109111500L, 20220109113000L, 20220109114500L,
			20220109140000L, 20220109141500L, 20220109143000L, 20220109144500L,
			20220109150000L, 20220109151500L, 20220109153000L, 20220109154500L,
		)
	}

	test("iterators on sunday every month on first week with several hourly time spans give consistant results") {
		TimeTableItem(
			occurenceStartDate = 20220101,
			rrule = "FREQ=MONTHLY;BYSETPOS=1;BYDAY=SU;INTERVAL=1",
			hours = listOf(TimeTableHour(80000L, 120000L), TimeTableHour(140000L, 160000L))
		).iterator(
			20220101,
			20230101,
			Duration.ofMinutes(15)
		).asSequence().take(48).toList() shouldBe listOf(
			20220102080000L, 20220102081500L, 20220102083000L, 20220102084500L,
			20220102090000L, 20220102091500L, 20220102093000L, 20220102094500L,
			20220102100000L, 20220102101500L, 20220102103000L, 20220102104500L,
			20220102110000L, 20220102111500L, 20220102113000L, 20220102114500L,
			20220102140000L, 20220102141500L, 20220102143000L, 20220102144500L,
			20220102150000L, 20220102151500L, 20220102153000L, 20220102154500L,
			20220206080000L, 20220206081500L, 20220206083000L, 20220206084500L,
			20220206090000L, 20220206091500L, 20220206093000L, 20220206094500L,
			20220206100000L, 20220206101500L, 20220206103000L, 20220206104500L,
			20220206110000L, 20220206111500L, 20220206113000L, 20220206114500L,
			20220206140000L, 20220206141500L, 20220206143000L, 20220206144500L,
			20220206150000L, 20220206151500L, 20220206153000L, 20220206154500L,
		)
	}
})
